<html>
   <head>
      <style>   
      /* Style the header with a grey background and some padding */
      .header {
          overflow: hidden;
          background-color: #343a40;
          padding: 0px;
          color: w#fff;
      }
      /* Style the header links */
      .header a {
          float: left;
          color: #fff;
          text-align: center;
          padding: px;
          text-decoration: none;
          font-size: 20px;
          line-height: 25px;
          border-radius: 4px;
      }
      /* Style the logo link (notice that we set the same value of line-height and font-size to prevent the header to increase when the font gets bigger */
      .header a.logo {
          font-size: 12px;
          font-weight: bold;
          margin-left: 10px;
      }
      .header a:hover.logo {
          color: #fff;
      }
      /* Change the background color on mouse-over */
      .header a:hover {
          /*background-color: #ddd;*/
          color: #17a2b8;
      }
      /* Style the active/current link*/
      .header a.active {
          background-color: dodgerblue;
          color: white;
      }
      /* Float the link section to the right */
      .header-right {
          float: right;
      }
      #editor {

      }
      .message {
          text-align: left;
          padding: 5px;
          text-decoration: none;
          font-size: 10px;
          color: #dc3545;
      }
    
      .editor {
          border: 1px solid #6c757d;
      }
      .graph {
          border: 1px solid #6c757d;
      }
      /* Add media queries for responsiveness - when the screen is 500px wide or less, stack the links on top of each other */
      @media screen and (max-width: 500px) {
          .header a {
              float: none;
              display: block;
              text-align: left;
          }
          .header-right {
              float: none;
          }
      }
      </style>
   </head>
   <body>
      
    <script src="/js/ace.1.4.12.min.js" type="text/javascript" charset="utf-8"></script>

      <div class="header">
          <a href="#default" class="logo">Graphviz Editor</a>
          <!-- <div class="header-right">
            <a class="active" href="#home">Home</a>
            <a href="#contact">Contact</a>
            <a href="#about">About</a>
            </div> -->
      </div>

      <div id="bar" class="message"></div>

      <div id="maindiv" style="width: 100%; display: table;">
          <div style="display: table-row; height: 100px;">
            <div id="editor" class="editor" style=" width: 40%; display: table-cell;">digraph g { a -> b; a -> c; c -> d; } 
            </div>
            <div id="graph" class="graph" style="display: table-cell;"> 
            </div>
          </div>
      </div>

      <label for="generator">Generator:</label>
      <select name="generator" id="generator">
          <option value="web">Web</option>
          <option value="api">API</option>
      </select>
      <button class="button secondary" style="margin-left: 16px;" onclick="generateGraph()">Generate</button>
      <label for="toggle">Editor?</label>
      
      <input class="input" id="toggle" type="checkbox" onclick="editorManager()" checked>

      <script src="/js/viz-lite.js"></script>
      <script src="/js/panzoom.js" type="text/javascript" charset="utf-8"></script>
      
      <script>

      //Var to store the graph div size to use on resizing
      let svgRegularWidth;

      //Set main div height
      document.getElementById("maindiv").style.height = window.innerHeight * 0.8 + "px";
      
      //Initialialize and configure Ace Editor
      ace.config.set("basePath", "/js");
      var editor = ace.edit("editor");
      editor.renderer.scrollBarV.getWidth = function () {
          return 200;
      };
      editor.renderer.setShowGutter(true);
      editor.session.setOption("useWorker", true);
      editor.setShowPrintMargin(false);
      editor.getSession().setMode({ path: "ace/mode/dot", v: Date.now() });
      editor.session.setUseSoftTabs(true);
      editor.session.setOption("useWorker", true);
      editor.on("change", function (value) {
      //     console.log("------editor.onChange-------");
           generateGraph();
      });

      //Resize editor and graph divs
      function editorManager() {

        //store the graph div size to use on resizing
        if (svgRegularWidth == undefined) {
              svgRegularWidth = document.getElementById("graph").offsetWidth;
              console.log("svgRegularWidth:" + svgRegularWidth);
          }

          // Get the checkbox
          var checkBox = document.getElementById("toggle");

          // resize editor and graph divs
          if (checkBox.checked == true) {
             document.querySelector("#graph > svg").setAttribute("width", svgRegularWidth + "px");
              var element = document.getElementById("editor");
              element.style.width = "40%";
          } else {
              var element = document.getElementById("editor");
              element.style.width = "0%";
              document.querySelector("#graph > svg").setAttribute("width", document.getElementById("graph").offsetWidth + "px");              
          }
      }

      //Generate graph from dot string
      function generateGraph() {
          
          //Read dot string from editor  
          var dot_str = editor.getValue();
          var options = {
              format: "svg", // svg
              //engine: 'dot'
          };

          //Identify the option selected to generate the graph
          var sel = document.getElementById("generator");
          var selected_value = sel.options[sel.selectedIndex].value;

          //Clean dot errors
          document.getElementById("bar").innerHTML = "&nbsp;";

          if (selected_value == "api") {
              
              //Request SVG from API
              const xhttp = new XMLHttpRequest();
              url = "http://192.168.33.50:5000/gviz/";
              xhttp.onreadystatechange = function () {
                  if (this.readyState == 4 && this.status == 200) {
                      var obj = JSON.parse(this.responseText);
                      document.getElementById("graph").innerHTML = obj.svg;
                  }
              };

              xhttp.open("POST", url, true);
              xhttp.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
              var myObject = {};
              myObject.dot = dot_str;
              xhttp.send(JSON.stringify(myObject));

              console.log("GENERATION BY API");
          } else {
              
              //Get SVG from Vis.js
              try {
                  var graph = Viz(dot_str, options);
                  document.getElementById("graph").innerHTML = graph; // SVG
                  console.log("GENERATION BY WEB");
              } catch (e) {
                  console.error(e); // pass exception object to error handler
                  document.getElementById("bar").innerHTML = e.message;
              }
          }

          fixGraphSize();

      }

      generateGraph();

      function fixGraphSize() {
          
          // grab the DOM SVG element that you want to be draggable/zoomable
          var area = document.getElementById("graph0");
          
          // and forward it it to panzoom.
          window.pz = panzoom(area, { autocenter: true, bounds: true, boundsPadding: 0.1 });

          //Resize svg
          document.querySelector("#graph > svg").setAttribute("height", document.getElementById("graph").offsetHeight + "px");
          document.querySelector("#graph > svg").setAttribute("width", document.getElementById("graph").offsetWidth + "px");

          //Center svg.g on graph div
          let element = document.querySelector("#graph");
          var w = document.getElementById("graph").offsetWidth / 2;
          var h = document.getElementById("graph").offsetHeight / 2;
          window.pz.moveTo(w, h);
      }
   
      </script>
   </body>
   <script></script>  
</html>